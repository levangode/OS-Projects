        +---------------------------+
		    | CS 140                    |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	DESIGN DOCUMENT           |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Levan Goderdzishvili  	<lgode14@freeuni.edu.ge>
Mikheil Metreveli  		<mmetr14@freeuni.edu.ge>
Papuna Gaprindashvili  	<pgapr14@freeuni.edu.ge> github: papunag209@<papunag209@gmail.com>
Sandro Magradze  		<amagh13@freeuni.edu.ge>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

<papunag209> წავიკითხე ლინუქსის წიგნი რომელიც მოგვეცის(unix programming inteface),
პირობაში უკვე რამდენიმე დავალებაა თითქმის არაფერი წერია და საჭირო გახდა უკვე.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


page.h - ში 
#define STACK_LIMIT 0x800000  // == 2^23 == 8mb
struct spt_entry{
	uint8_t* kpage;
	uint8_t* upage;
	int page_type;
	bool writable;
	bool isDirty;
	size_t bytes_read;
	size_t bytes_zero;
	struct file* f;
	off_t offset;
	size_t swap;
	struct hash_elem elem;
	bool isSwap;
};

ვიყენებთ supplemental page table-ს შექმნისა და მენეჯმენტისთვის. supplemental pate table არის per process სტრუქტურა, რომელიც
ინახავს ყველა საჭირო ინფორმაციას ვირტუალური და ფიზიკური მეხსიერების მაპინგის შესახებ. ის ასევე მონაწილეობას იღებს 
lazy loading-სა და სტეკის გაზრდაში.


frame.h-ში
struct list frame_list;
struct lock list_lock;
struct frame_entry{
	uint8_t* kpage;
	uint8_t* upage;
	bool is_pinned; //if true this frame can't be evicted
	struct thread* occupying_thread; //needed to prevent thread from evicting it's own memory
	struct list_elem elem;
};

ფრეიმებისა და ფრეიმ ლისტის მთავარი დანიშნულება არის eviction-ის შესრულება. ამისთვის frame_list-ში ვინახავთ
პალოკით უკვე გამოყოფილ ფრეიმებს. ამასთანავე, frame_list არის საერთო ყველა პროცესისთვის.




#define FROM_FILE 0	ფაილიდან
#define ALL_ZERO 1	ცარიელი
#define FROM_SWAP 2	სვაპიდან
#define FROM_MMAP 3	მემორი მეპიდან

მოვახდინეთ supplemental page table entry-ების ტიპების დეფინიცია, რომლის მიხედვითაც უნდა მოხდეს ფეიჯის ჩატვირთვა.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.

გამომდინარე იქიდან, რომ install_page-ში, სადაც ხდება ფეიჯ თეიბლში მაპინგი, ასევე ჩამატებული გვაქვს supplemental page table-ში
ახალი entry-ს ჩამატება შესაბამისი upage და kpage-სთვის,  მოცემულ ფეიჯს პირდაპირ ვეძებთ supplemental page table-ში find_page_in_supt ფუნქციით.
თუ მისი შესაბამისი entry ვერ ვიპოვეთ, გვიბრუნდება null.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

page_fault ჰენდლერში ისევე როგორც syscall-ის is_valid ფუნქციაში,  გვაქვს შემოწმება, თუ იუზერ ვირტუალ ადრესი არ არის, არ ვეხებით.
შესაბამისად SPT-ში ვალიდური იუზერ ადრესები გვაქვს, პლუს ამას, ყოველთვის როცა პოინტერს ვეხებით, ჯერ ვახდენთ მის დამრგვალებას
pg_round_down-ით.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

ფრეიმ ალოკაცია ჩვეულებრივ დაშენებულია palloc_get_page-ზე, რომელიც იყენებს palloc_get_multiple-ს, ხოლო ამ უკანასკნელს გააჩნია
თავისი სინქრონიზაციის მექანიზმი ->>>
	lock_acquire (&pool->lock);
  	page_idx = bitmap_scan_and_flip (pool->used_map, 0, page_cnt, false);
  	lock_release (&pool->lock);
<<< რომელიც მთელ pool-ს ლოქავს და შესაბამისად სხვადასხვა პროცესი თუ ერთად შეეცდება ახალი ფრეიმის მიღებას, ერთ-ერთს პულზე დალოდება მოუწევს სანამ მეორე
ლოქს გაათავისუფლებს.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

წინასწარ განსაზღვრული სტრუქტურები და სტრატეგია არ გვქონია, დავიწყეთ ცარიელი სტრუქტურებით რომლებიც მხოლოდ
upage და kpage-ს შეიცავდა და შემდეგ უკვე თითოეული feature-ს იმპლემენტაციისას ვამატებდით იმას, რაც დაგვჭირდებოდა.
შესაბამისად, ის მინიმალური ინფორმაცია გვაქვს შენახული, რასაც იმპლემენტაციაში ვიყენებთ.

SPT ენთრიების ჰეშირებას ვახდენთ upage-ს მიხედვით, რადგან წვდომა უნდა გვქონდეს იუზერის ვირტუალური მისამართების მიხედვით,
თუ გვაქვს ასეთი მისამართი, უკვე ვპოულობთ მთელ ენთრის და ვიგებთ დანარჩენ ინფორმაციას.


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct block *swapblock;
სტრუქტურა რომელშიც ინახება დასვაპული პეიგები საიდანაც ხდება ჩაწერა და წაკითხვა;
struct bitmap *swapmap;
swap ში სექტორები pageით არის დაკავებული თუ თავისუფალია; 
struct lock swaplock;
swap  ის სინქრონიზაციისთვის;

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

გამოვიყენე second chance ალგორითმი რომელიც სემინარზე აღგვიწერეს. გადავუყვები frame-ების
ლისტს, თუ დაპინულია მაშინ მოცემულ frame-ს აღარ განვიხილავ. ხოლო pagedir_is_accessed
ით ვამოწმებთ access ბიტს და თუ false-არის მაშინ ამ frame-ს ვირჩევთ eviction-სთვის. თუ 
access ბიტი true არის, მაშინ false-ს ვანიჭებ და ვაგრძელებ ძებდნას. ბოლოში თუ გავედი ვიწყებთ
თავიდან, მაქსიმუმ 4-ჯერ (რაოდენობაზე ჯერ ვერ შევთანხმდით, ან 2 ჯერ ან 4 ჯერ).

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

ეს ნაწილი ჯერ არ მიწერია ბოლომდე, მაგრამ როდესაც ევიქშენს დავამთავრებთ გაგდებული frame აღარ იქნება რამში
(pagedir_clear_page-ით),და მის ადგილას ახალი ჩაიწერება. thread_currents() ის supplementary
page table-ში მოხდება შესაბამისი ცვლილებები .

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

ევრისტიკა განსაზღვრულია რამდენიმე პარამეტრით. 
1) ე.წ. იატაკი, რომელიც სტეკს აძლევს გაზრდის საშუალებას, მაგრამ ზღუდავს ამ ლიმიტს რათა არ მოხდეს code-სეგმენტში შეჭრა.
2) ვამოწმებთ რომ fault_addr არ არის სტეკ პოინტერს - 32 ბაიტზე დაბლა. 32 იმიტომ რომ pt-grow-pusha ტესტში ერთდროულად ხდება
სტეკის 32 ბაიტით გაზრდა. შესაბამისად, 32 ბაიტი არის მაქსიმუმი, რამდენითაც ერთ ჯერზე შეიძლება სტეკი გაიზარდოს.
3) fault_addr ნაკლები უნდა იყოს PHYS_BASE-ზე
---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

სინქრონიზაციაში არ გვაქვს დედლოქის პრობლემა, რადგან არსადაა მოსალოდნელი ციკლის შეკვრა.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
list_lock-ის მეშვეობით ევიქშენის დროს ფრეიმების ლისტს მთლიანად ვლოკავთ
შესაბამისად სხვა პროცესი ცვლილებებს ვერ მოახდენს სანამ ევიქშენი არ დასრულდება.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
is_pinned-ების მეშვეობით Q პროცესს ეცოდინება რომ არ შეუძლია ევიქშენი გაუკეთოს
ამ ფრეიმს. P პროცესი is_pinned-ს true-ს მიანიჭებს read-ის დროს. (not sure if
already implemented...)

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

syscall-ებს და მათ არგუმენტებს რაც შეეხება, მათი ევიქცია არასროს მოხდება, რადგან შესაბამის ფეიჯებს არ ვინახავთ ევიქციის
frame_list-ში. locking-ის ან რაიმე სხვა მექანიზმი არ გვაქვს, ყველაფერი ხდება ფეიჯ ფოლტში. რაც შეეხება არავალიდურ მისამართებთან
შეხებას, ასეთ შემთხვევაში ან entry-ს ვერ ვიპოვით და ამის გამო პროგრამა და-exit-დება, ან მისამართი სტეკის დასაშვებ რეგიონში ვერ მოხვდება
და ამ შემთხვევაშიც ვეღარ გააგრძელებს მუშაობას.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

ჩვენ არ გვაქვს ბევრი ლოქი, რაც არ უწყობს ხელს პარალელურობას, მაგრამ იმის გამო რომ დროში შეზღუდულები ვიყავით,
ვარჩიეთ slowly but truly სტრატეგიით ემუშავა ჩვენს პროგრამას.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct mmap_entry{
  struct list_elem elem;

  uint32_t id;//generated id
  //დამაპული ფაილების იდ-ების გენერირება.
  struct file* f;//file struct
  //ფაილის სტრუქტურის შენახვა რომელიც დაიმაპა

  void* uaddr;//user_virtual address
  //მისამართი რომელზეც დამაპეს ფაილი
  uint32_t size;//file size
  //ფაილის ზომა (მარტივად იტერაციისთვის ფაილზე)
  
};  

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
მეხსიერება იმაპება ბლოკებად საწყისი პოინტერიდან დაწეყებული PGSIZEების დაშორებით,
ჩატვირთვა ხდება მხოლოდ მაშინ როცა პოინტერის გამოყენებას შეეცდება ვინმე.
ჩაწერილ ბლოკებს ამოწმებს unmap-ის დროს და თუ საჭირო წერს ფაილურ სისტემაში.
გამოძევების ალგორითმს აქვს პრიორიტეტები და იმის მიხედვით ირჩევს გამოსაძევებელს
სხვა რაიმე ინტერაქცია არ აქვს page-ის ტიპთან, რადგან არ ჭირდება ყველასთვის
ერთნაირად მუშაობს.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
სანამ მეხსიერებაში დამაპვას დავიწყებთ ვამოწმებთ რომელიმე upage რომელიც უნდა
დავმაპოთ უკვე ხომ არ არი მეხსიერებაში.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
ყველა ტიპის page-ს აქვს ზუსტად ერთი და იგივე სტრუქტურა და იდენტური კოდი.
მხოლოდ გარკვეული პარამეტრებია სხვადასხვა მაგ:FROM_MMAP FROM_FILE. დანარჩენი
იგივეა ესენიც მხოლოდ იმიტომაა საჭირო რომ გამშვებ ფაილში არ ჩაწერო რამე, რომელიც
ისედაც არ არის ჩაწერადი და სიმართლე რომ გითხართ ამეების გარეშეც იმუშავებს. 
ერთადერთი სხვაობაა სვაპი რომელიც დამოუკიდებლად მუშაობს მაგრამ ცოტა მეტი დრო რომ
დავხარჯოთ აბსტრაქციების კარგ დიზაინზე ამის გაერთიანებაც შეიძლება და კოდი კიდევ უფრო 
შემოკლდება და ამავდროულად გამარტივდება(შემოწმებები გამოირიცხება რადგან ყველაფერზე
ერთუ ფუნცია იმუშავებს page_fault-ის დროს).

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
mmap იყო შედარებით ადვილი

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
ზოგადად უკეთესი წარმოდგენა შემექმნა რამდენად გამოსადეგია ვირტუალური მეხსიერება

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
1)სხვის კოდს თუ ჩახედავთ არ დაიჯეროთ უფრო მეტი არასწორი რაღაცეები წერია ვიდრე სწრი
რამდენ ტესტზეც არ უნდა გადიოდეს, ტესტები სისწორეს არ ამოწმებენ, მხოლოდ ტესტებზე გადის
თუ არა იმას. 
2)make check-ს ჯობია make grade ყველაფრით უფრო მეტ ინფორმაციას გიწერს და დებაგისთვის
გაცილებით უკეთესია. თან ქულასაც გიწერს.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
დავალების სხვადასხვა ნაწილების მიახლოებითი სირთულე რომ წინასწარ უთხრათ ხოლმე ჯგუფებს
კარგი იქნება რომ გუნდის რესურსები თავიდანვე სწორად გადაანაწილონ და მაქსიმალურად
სრულყოფილად დაწერონ პროექტი.

>> Any other comments?
