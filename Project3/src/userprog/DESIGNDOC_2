		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Levan Goderdzishvili  	<lgode14@freeuni.edu.ge>
Mikheil Metreveli  		<mmetr14@freeuni.edu.ge>
Papuna Gaprindashvili  	<pgapr14@freeuni.edu.ge>
Sandro Magradze  		<amagh13@freeuni.edu.ge>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


No new structs.
Two static variables, init_aloc and argmax_length.
init_aloc defines the arbitrary number of arguments that can be passed through a command.
argmax_length defines the arbitrary max length of the command together with its arguments, which is entered by user.



---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

At first, we parse the whole string and temporary save them in array like argv, but its temporal.
Then we iterate through this array in reversed order and do the "stackpushing" thing for each of them - 
- which is, freeing the enough memory at first by moving the stack pointer down, and then memcpying the
argument into the free space. After that, we follow the steps described in the assignment - the word alignment/null separators etc.

Stack overflowing won't be precautioned. THe page fault will be caught in exception and will be properely handled by as, which in
this case is exiting from the thread.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Because after extracting the first token(the command name), we should be able to access the rest of the string too.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.


1) Don't waste time in kernel.
2) kernel will get safe arguments and won't have to do the exceptions thing.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----


>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


struct thread
  {
    tid_t tid;                          
    enum thread_status status;          
    char name[16];                      
    uint8_t *stack;                     
    int priority;                       
    struct list_elem allelem;           

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    int child_load;
    /*parent thread tid*/
    tid_t parent_id;

    /*file descriptor counter*/
    int fd_num;

    /*file descriptor list*/
    struct list fd_list;

    /*pointer to parent thread*/
    struct thread* parent;
    /*status codes list for children*/
    struct list child_stat_code_list;
    /*status code elem where current threads status code is submitted*/
    struct child_stat_code* stat_code_elem;

    /*for parent to wait to see if child started successfully or not*/
    struct semaphore process_starting_sema;
    /*for returnin proces start information success/fail*/
    int process_start_status;

    //for ensurence of file integrity while executing
    /*this file is locked so that noone can edit it during execution*/
    struct file* current_file;
    
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */

  };

struct child_status_code{
  /*tid of the current element*/
    tid_t child_tid;
    /*status code for current element*/
    int status_code;

    /*semaphore for waitin to current elemets status code*/
    struct semaphore wait_sema;

    /*list element*/
    struct list_elem child_status_code_list_elem;

};

struct file_descriptor{
  /*file descriptor*/
  int id;
  /*file*/
  struct file * f;
  /*list element*/
  struct list_elem elem;
};


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?




---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

When reading from stack, we simply check every pointer for valideness before using it. 
On the other hand if the pointer points to a buffer, we check the whole buffer for the valideness.
If an error is caught, we exit the thread, which on it's own, calls the process_exit where we deallocate all our resources,
close files and release locks.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We ensure this with one semaphore initialy set to 0. On creation of the child thread we check
for successful load of it meanwhile keeping the pointer to the parent thread, where we have a status variable
for the successful launch of the child. As soon as it's known whether child loaded successfully or not, we set
the status variable in the parent and signal the parent letting him to take the semaphore on which he blocked
right away after creating the child. The parent downs the semaphore and checks the status set by child, so he can
find out if his child survived or not :)

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Idk why it should have disadvantages, everyithing is neat and fine.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We didn't change anything about it.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Tu dzma xar raa

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
