            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <lgode14@freeuni.edu.ge>
FirstName LastName <pgapr14@freeuni.edu.ge>
FirstName LastName <mmetr14@freeuni.edu.ge>
FirstName LastName <amagh13@freeuni.edu.ge>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
sleeping_threads// რომ შემენახა ყველა პროცესი რომლებსაც დავაძინებდი.
int64_t wake_up_time;//ვინახავ როდის უნდა გაიღვიძოს პროცესმა



---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
პირველ რიგში ვამოწმებ რომ გადმოცემული tick-ის რაოდენობა, ანუ რამდენი ხანიც უნდა ეძინოს 
პროცესს 0-ზე მეტი იყოს. ვთიშავ ინტერაპტებს. მოცემულ პროცესს wake_up_time-ად ვანიჭებ
სისტემაში ახლა რამდენი tick-იც არის მაგას დამატებული შემოსული tick-ების რაოდენობას,
რაც მოგვცემს გაღვიძების დროს სისტემის tick-ების დროით. ვინახავ ამ პროცესს ზემოხსენებულ sleeping_thread-ში.
ვუშვებ thread_block() და ვრთავ ინტერაპტებს.
interrupt handler-ში tick-ებს ვზრდით, შემდეგ ვამოწმებ mlfqs ფლაგი თუ გვაქვს სქეჯულერისთვის.თუ გვაქვს შესაბამის 
ფუნქციებს ვუშვებ, რომლებიც პირობაში აღწერილი ფორმულების მიხედვით ანგარიშობენ სხვადასხვა ცვლადს.  ვამოწმებ
რომელიმე პროცესის გაღვიძების დრო თუ მოვიდა. თუ დროა ვაღვიძებ და ვითვლი რამდენი გავაღვიძე. ბოლოს თუ 0-ზე 
მეტმა გაიღვიძა intr_yield_on_return()-ს ვიძახებ.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
sleeping_threads წინასწარაა დასორტირებული და შედეგად პირდაპირ ვიღებთ იმ პროცესს,რომელსაც ახლა უწევს გაღვიძება.
---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
ინტერაპტებს ვთიშავ. სემაფორის ან ლოკის გამოყენება უაზროდ გაართულებდა კოდს.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
კვლავ ინტერაპტების გათიშვის იმედზე ვარ..ჯერ არ უმტყუნია

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
დაუსორტირებელი ლისტში რომ შემენახა პროცესები ყოველ ჯერზე როდესაც
interrupt_handler-ში შემოვიდოდა მომიწევდა მთელი ლისტის გადაყოლა,
რაც ცუდია ვინაიდან interrupt_handler-ში ცოტა ხანი გვინდა ვიყოთ.
             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    int64_t wake_up_time;
    //added by me for scheduler
    int nice; 
    int recent_cpu;
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

    struct priority_entry donation_entry;

    struct list donation_list;

    struct lock* blockedOn;


#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

  struct priority_entry
{
  struct thread* priority_donator;
  struct lock* donated_for_lock;

  struct list_elem priority_elem; 
};

თითოეულ სრედს დავამატეთ donation_list-რომელშიც დასორტირებულად(პრიორიტეტის მიხედვით) ვინახავთ donation_entry-ებს.
რა არის donation_entry. ეს არის სტრუქტურა, რომელიც ინახავს ინფორმაციას დონაციის შესახებ, კერძოდ: 
    ### priority_donator-სრედი, რომელმაც დონაცია გაგვიკეთა
    ### donated_for_lock-ლოქი, რომელზეც მოხდა დონაცია
    ### priority_elem-ლისტში შესანახად საჭირო ელემენტი

თითოეულ სრედს გააჩნია წინასწარ გამზადებული donation_entry რომელსაც შემდგომში პირდაპირ გადასცემს იმ სრედს, რომელსაც დონაციას უკეთებს და ისიც შესაბამისად შეინახავს ამ entry-ს.

ასევე თითოეული სრედი ინახავს ფოინთერს ლოქზე, რომელზეც ის არის დაბლოკილი. ეს საჭიროა ჯაჭვური და ჩადგმული დონაციების გასაკეთებლად და ამ მექანიზმსაც ავხსნით.

>> B2: Explain the data structure used to track priority donation.

სტრუქტურები აღვწერეთ უკვე ზემოთ.

>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

გვაქვს სამი სრედი H(მაღალი პრიო), M(საშუალო), L(დაბალი)

        +------+    +------+
        |Lock A|    |Lock B|
        +------+    +------+

+--------+     +--------+      +---------+
|Thread M|     |Thread L|      |Thread H |
+--------+     +--------+      +---------+

M-ს აქვს აღებული A ლოქი, რომელიც ასევე უნდა H-ს.
ხოლო L-ს აქვს აღებული B ლოქი, რომელიც უნდა M-ს.

H-მა უნდა გაუკეთოს დონაცია M-ს რათა ის გაეშვას და H-ს A ლოქი გამოუნთავისუფლოს. იგივენაირად, M-მა უნდა გაუკეთოს L-ს დონაცია B ლოქზე. მაგრამ ეს საკმარისი არ იქნება, იმიტომ
რომ მას შემდეგ რაც L მიიღებს M-ის პრიორიტეტს, ის მაინც ვერ გაეშვება, რადგან უმაღლესი პრიორიტეტი არ აქვს. იმისთვის, რომ L გაეშვას, საჭიროა მან დონაცია H-ისგანაც მიიღოს.
ამისთვის გვჭირდება ჩადგმული დონაცია, რომლის იმპლემენტაციას ქვემოთ აღვწერთ მანამდე კი შევხედოთ რა მოხდება ჩადგმული დონაციის განხორციელებისას. თავდაპირველად L მხოლოდ M-ის პრიორიტეტს მიიღებს
დონაციის სახით, მას შემდეგ რაც M დონაციას მიიღებს H-სგან, ის დონაციას გაუკეთებს L-ს, რის შედეგადაც L გაეშვება, მორჩება საქმეს და M-ს დაუთმობს ლოქს, ამ დროს M-უკვე მზადაა მუშაობის გასაგრძელებლად,
მორჩება თავის საქმეს და ლოქს დაუთმობს H-ს. H-საც შეუძლია გაგრძელება და ყველა ბედნიერია.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

სემაფორებისა და ლოქების შემთხვევაში პრობლემა მარტივად მოგვარდა მომლოდინეთა ლისტიდან უმაღლესი პრიორიტეტის სრედის ამოღების. ანუ, უბრალოდ pop-ის მაგივრად ვიყენებთ ლისტის ფუნქციას 
და სპეციალურ კომპერატორს, რომელიც პრიორიტეტების მიხედვით ადარებს ლისტში შენახულ სრედებს.

ხოლო condition variable-ების შემთხვევში ხდება სემაფორების ლისტების რეგულაცია, ამიტომ გვიწევს ყველა ასეთი ლისტის გადაყოლა, უმაღლესი პრიორიტეტის მქონე სრედის მოძებნა და
condition signal-ზე მისი გაღვიძება.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

### ვცდილობთ sema_try_down-ით სემაფორის აღებას. თუ ავიღეთ, ლოქის holder-ს მიენიჭება current სრედი, ხოლო current სრედის lockedOn-ცვლადში ჩაიწერება NULL( ანუ default მნიშვნელობა)
### თუ try_down-მა false დაგვიბრუნა, ანუ ვერ ავიღეთ და დავიბლოკეთ, current სრედის blockedOn-ს მიენიჭება ეს ლოქი, შემდეგ გამოვიძახებთ დონაციის ფუნქციას donate_helper და ამის ვიწყებთ ლოდინს იმავე სემაფორაზე. 
### donate_helper-ის ალგორითმი შემდეგნაირია:
lock->holder-ით გვაქვს წვდომა იმ სრედზე, რომელსაც ლოქი აქვს აღებული, ვამოწმებთ მისი პრიორიტეტი თუ არის დაბალი current-ის პრიორიტეტზე და ამ შემთხვევაში ვუკეთებთ დონაციას. დონაცია, როგორც უკვე აღვნიშნეთ, უბრალოდ donation_entry-ს მიცემაა სადონაციე სრედისთვის(ამ კონკრეტული ლოქიანად), რომელიც მას donation_list-ში შეინახავს.
### მთავარი მუშა ალგორითმი, რომელიც ჩადგმულ და ჯაჭვურ დონაციებს აკონტროლებს, სწორედ შემოწმების ფუნქციაში მდომარეობს, უფრო კონკრეტულად: get_other_priority
მეთოდში, რომელსაც გადაეცემა სრედი და გვიბრუნებს მის პრიორიტეტს. პრიორიტეტის დაბრუნებას და დონაციას რაც შეეხება, ჩვენ არასდროს ვუცვლით სრედს პრიორიტეტს, უბრალოდ თუ მის დონაციების ლისტში(სორტირებულში) გვაქვს ელემენტი, ამ ელემენტის მიხედვით ვაბრუნებთ პრიორიტეტს - რაც რეკურსიული ფუნქციაა და იგივე get_other_priority-ს გამოყენებას გულისხმობს თავის თავზე. ცოტა რთული ალგორითმია და კიდევ ერთხელ განვმარტავ.

სრედის donation_list-ში გვაქვს entry-ები, რომლებიც შეიცავენ პოინტერს დონატორ სრედზე(struct thread* priority_donator). ასევე თითო სრედისთვის გვაქვს თავდაპირველი პრიორიტეტი(რომელიც ჩვენ არ დაგვიმატებია). get_other_priority მიაკითხავს ამ ლისტს, თუ იქ დახვდა დონაცია, ისევ get_other_priority-ს გამოიძახებს უკვე იმ სრედისთვის, რომელიც დონაციაში(priority_donator) დახვდა, საბოლოოდ მივალდთ ბეიზ ქეისამდე, როცა სრედს არ აქვს დონაცია გაკეთებული და დააბრუნებს თავის პრიორიტეტს, ეს სწორედ ის პრიორიტეტია, რომელიც პირველ გამომძახებელ სრედს უნდა დაუბრუნდეს.


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

lock_release()-ის ჩვენს იმპლემენტაციაში განსაკუთრებული არაფერი ხდება. ეს იმიტომ, რომ ჩვენი ready_list-ყოვლთვის დალაგებულია პრიორიტეტების მიხედვით.
ხელახლა დასორტირება ხდება დონაციის დროსაც. ამას გარდა, როგორც B3 კითხვაში აღვნიშნეთ, სემაფორა პირველად უმაღლესი პრიორიტეტის სრედს უშვებს. lock_release კი
სემაფორაზეა დაშენებული.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

სინქრონიზაციის გარეშე თავისუფლადაა შესაძლებელი რომ ერთი სრედისთვის thread_set_priority-ს გამოძახება პარალელურად მოხდეს სხვადასხვა სრედიდან, რაც ჩვენ ნამდვილად არ გვაწყობს. ამის თავიდან ასაცილებლად ვიყენებთ ინტერაპტებს, გვაქვს ერთი კრიტიკული რეგიონი, რომელშიც ხდება set_priority-ს გამოძახება.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Scheuling-ს რაც შეეხება, აქ ალბათ ცალსახა გამოსავალი იყო სორტირებული ლისტების ქონა და პრიორიტეტების მიხედვით ელემენტების ამოღება.
დონაციების შემთხვევაში, იყო სხვა ვარიანტებიც, მაგალითად პრიორიტეტების ლისტების ქონა და მათი დინამიურად განახლება, ჩამატება ამოშლა. ჩვენი გადაწყვეტა იდეურად
ალბათ უფრო რთულია მაგრამ საკმაოდ მოსახერხებელი და მდგრადი იმპლემენტაცია აქვს.

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
#define REFRESH_TIME 4//პრიორიტეტების განახლების დრო(თიქებს ამაზე ვყოფთ)

int nice; //ვინახავთ პროცესის nice მნიშვნელობას
int recent_cpu; //ვინახავთ recent_cpu მნიშვნელობას
int load_avg;//გლობალური ცვლადი thread.c ში რომელიც სისტემის საშუალო დატვირთვას ზომავს
სამივე ცვლადი აუცილებელია Advanced Scheduler-ის ფორმულებისთვის

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0  63  61  59   A
 4      4   0   0  62  61  59   A          
 8      8   0   0  61  61  59   B
12      8   4   0  60  60  59   A
16     12   4   0  60  59  59   B
20     12   8   0  60  59  59   A
24     16   8   0  59  59  58   C
28     16  12   2  59  58  58   B
32     16  12   4  59  58  58   A
36     20  12   4  58  58  58   C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?
ტოლი პრიორიტეტების მქონე პროცესები თუ იყო,როგორც ლექტორმა
გვითხრა starvation-ისგან თავის ასაცილებლად ავიღე ის პროცესი,რომელიც
ჯერ არ გაშვებულა ან რომელიც ყველაზე დიდი ხანი ელოდებოდა სქეჯულერს.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?
advanced scheduler-ის ფორმულების გამოანგარიშება ხდება interrupt handler-ში,
რაც ცუდია სიჩქარისთვის ბევრ პროცესზე როცაა გაშვებული.

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?
ჩემ ნაწილს არაფერი არ აქვს გასაუმჯობესებელი, ჩემი ნაწილი სრულყოფილად წერია,დავალების პირობაშიც კარგადაა ახსნილი(სანდრო)

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?
როგორც დავალებაში ეწერა, აღწერილი იყო fixed-point ის არითმეტიკა და გამოვიყენე დავალებაში აღწერილი აბსტრაქცია გავაკეტე ჰ ფაილი
და ც ფაილში ჩამოვწერე ფუნქციები,დავლაებაში დეტალურად ეწერა თითოეული რას როგორ უნდა აკეთებდეს. იმიტომ გავაკეთე ესე რომ 
კარგად იყო აღწერილი დავალების პირობაში და ასე მარტივად გამოვიდა

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
